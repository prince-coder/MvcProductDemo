@model PagedList.IPagedList<MvcProductDemo.Models.Product>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewBag.Title = "Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Product</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
@using (Html.BeginForm())
{
    <p>

        Find By Name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />

    </p>
}
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Product Name", "Index", new { sortOrder = ViewBag.Sort, SortParam = "Product Name", CurrentFilter= ViewBag.CurrentFilter })
        </th>
        <th>
            @Html.ActionLink("Price", "Index", new { sortOrder = ViewBag.Sort, SortParam = "Price" })
        </th>
        <th>
            @Html.Label("Description")
        </th>
        <th>
            @Html.Label("Quantity")
        </th>
        <th>
            @Html.ActionLink("Category Name","Index", new { sortOrder = ViewBag.Sort, SortParam = "Category Name", CurrentFilter = ViewBag.CurrentFilter })
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.ProductName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Price)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Quantity)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Category.CategoryName)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.ProductId }) |
            @Html.ActionLink("Details", "Details", new { id=item.ProductId }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.ProductId })
        </td>
    </tr>
}

</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
